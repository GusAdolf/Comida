# -*- coding: utf-8 -*-
"""Prueba4_JonathanGuerra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y-YWWyLiRyge92eqwB9wOaJMUDeH6Ve4
"""

import numpy as np

matriz_confusion = np.array([[923,4,21,8,4,1],
                             [5,972,2,0,0,0],
                             [26,2,892,30,13,8],
                             [12,4,32,826,24,48],
                             [5,1,28,24,898,13],
                             [7,2,28,111,18,801]])

#a) Determinar el tamaño del dataset (0.5 Ptos.)
print('a) Tamaño del dataset')
print('Tamaño del dataset: ',np.sum(matriz_confusion))
print("################################################################")

################################################################################################################################

#b) Indicar la cardinalidad de la clase predicha (1 Pto.)
m_c_t = np.transpose(matriz_confusion)
f,c = m_c_t.shape
print('b) Cardinalidad de la clase predicha')
for i in range(f):
  print(f"Cardinalidad Clase {i+1}:  {np.sum(m_c_t[i])} instancias")
print("################################################################")

################################################################################################################################

#c) Indicar la cantidad de instancias clasificadas como gato que eran pájaros (0.5 Ptos.)
print("c) Cantidad de instancias clasificadas como gato que eran pájaros")
print("Cantidad de instancias : ",matriz_confusion[2][3])
print("################################################################")

################################################################################################################################

#d) Determinar el TPR (0.5 Ptos.)
def recall(matrix):
  filas,columnas = matrix.shape
  recMatrix = []
  for i in range(filas):
    suma = sum(matrix[i,:])
    for j in range(columnas):
      if i == j:
        tp = matrix[i,j]
    recMatrix.append(tp/suma)
  return np.round(recMatrix,2)

tpr = recall(matriz_confusion)
cont = 1
print("d) Determinar el TPR")
for i in tpr:
  print(f'TPR Clase {cont}: {i}')
  cont = cont+1
print("################################################################")

################################################################################################################################

#e) Determinar el False Negative Rate (0.5 Ptos.)
cont = 1
print("e) Determinar el False Negative Rate")
for i in tpr:
  print(f'FNR Clase {cont}: {round((1-i),2)}')
  cont = cont+1
print("################################################################")

################################################################################################################################

#f) Determinar el False Positive Rate (0.5 Ptos.)
def fpr(matrix):
  filas,columnas = matrix.shape
  Treal = np.sum(matrix, axis=1)
  Tpred = np.sum(matrix, axis=0)
  vFPR = []
  for i in range(filas):
    for j in range(columnas):
      if i == j:
        num = Tpred[i] - matrix[i,j]
        den = np.sum(Treal)-Treal[i] 
        vFPR.append(num/den)
  return np.round(vFPR,3)

f_p_r = fpr(matriz_confusion)
cont = 1
print("f) Determinar el False Positive Rate")
for i in f_p_r:
  print(f'FPR Clase {cont}: {i}')
  cont = cont+1
print("################################################################")

################################################################################################################################

#g) Determinar el recall para cada clase (1 Pto.)
recall_ = recall(matriz_confusion)
cont = 1
print("g) Determinar el recall para cada clase")
for i in recall_:
  print(f'Recall Clase {cont}: {i}')
  cont = cont+1
print("################################################################")

################################################################################################################################

#h) Determinar el accuracy (0.5 Ptos.)
def numInstan(matrix):
  filas,columnas = matrix.shape
  total = 0
  for i in range(filas):
    total += sum(matrix[i,:])
  return total

def accuracy(matrix):
  total = numInstan(matrix)
  filas,columnas = matrix.shape
  diag = 0
  for i in range(filas):
      for j in range(columnas):
        if i == j:
          diag += matrix[i,j]
  acc = diag/total
  return round(acc,2)

acc = accuracy(matriz_confusion)
print("h) Determinar el accuracy")
print(f'El accuracy es: {acc}')
print("################################################################")

################################################################################################################################

#i) Determinar la sensitividad (0.5 Ptos.)
#1-fpr
cont = 1
print("i) Determinar la sensitividad")
for i in recall_:
  print(f'Sensitividad Clase {cont}: {i}')
  cont = cont+1
print("################################################################")

################################################################################################################################

#j) Determinar el precision para cada clase (0.5 Pto.)
def precision(matrix):
  filas,columnas = matrix.shape
  sumaH = np.sum(matrix,axis=0)
  vPrec = []
  for i in range(filas):
      for j in range(columnas):
        if i == j:
          vPrec.append(matrix[i,j]/sumaH[i])
  return np.round(vPrec,2)

pre = precision(matriz_confusion)
cont = 1
print("j) Determinar el precision para cada clase")
for i in pre:
  print(f'Precision Clase {cont}: {i}')
  cont = cont+1
print("################################################################")

################################################################################################################################

#k) Determinar la especificidad (0.5 Ptos.)
#1-fpr
cont = 1
print("k) Determinar la especificidad")
for i in f_p_r:
  print(f'Especificidad Clase {cont}: {round((1-i),3)}')
  cont = cont+1
print("################################################################")

################################################################################################################################

#l) Determinar el número de fallos (0.5 Ptos.)
diag =  np.sum(np.diag(matriz_confusion))
instancias = np.sum(matriz_confusion)
fallos = instancias-diag

print("l) Determinar el numero de fallos")
print(f'Numero de fallos: {fallos}')